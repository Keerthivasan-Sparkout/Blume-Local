// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActivityLevel{
  LOW
  MODERATLY_ACTIVE
}

enum Gender{
  MALE
  FEMALE
}

enum Smoking{
  YES
  No
}

enum OrderStatus{
  REQUEST
  REVIWED
  SHIPPED
  DELEIVERED
}

enum AddressType{

  DELIVERY
  BILLING

}

model User{

  id Int @id() @default(autoincrement())
  firstName String?
  lastName String?
  fullName String?
  DoB String?
  gender String?
  email String? @unique()
  sub String @unique()
  country String?
  language String?
  mobile String? @unique()
  emailToken String? @unique()
  googleToken String? @unique()
  appleToken String? @unique()
  sms Boolean?
  sendemail Boolean?
  whatsApp Boolean?
  call Boolean?
  servicesCart Services[]
  productCart Product[]
  userProgram UserProgram[]
  task Task[]
  order Order[]
  address Address[]
  medicalInfo MedicalInfo?
  
}

model Task{

    id Int @id() @default(autoincrement())
    user User @relation(fields:[userId],references:[id])
    userId Int 
    type String 
    description String
    imageUrl String?
}

model Program{

  id Int @id() @default(autoincrement())
  name String @unique()
  description String
  Photo String
  totalDuration Int @default(0)
  userProgram UserProgram[]
}

model Services{

  id Int @id() @default(autoincrement())
  name String @unique()
  description String?
  users User[]

}

model Product{

  id Int @id() @default(autoincrement())
  name String @unique()
  description String
  users User[]
}

model UserProgram{

  userId Int
  ProgramID Int
  startAt DateTime @default(now())
  renewAt DateTime?
  user User @relation(fields:[userId],references:[id])
  program Program  @relation(fields:[ProgramID],references:[id])

  @@id([userId,ProgramID])

}

model Order{

  id Int @id() @default(autoincrement())
  items String[]
  billingAddress String
  deliveryAddress String
  status OrderStatus
  user User @relation(fields:[userId],references:[id])
  userId Int 
}


model Address{

  id Int @id() @default(autoincrement())
  houseNo Int
  area String
  city String
  state String
  zipCode Int 
  user User @relation(fields :[userId],references:[id])
  userId Int
  addresType AddressType
  default Boolean
}

model MedicalInfo{

  id Int @id() @default(autoincrement())
  activityLevel ActivityLevel?
  gender Gender?
  height String?
  goalHeight String?
  weight String?
  goalWeight String?
  smoking Smoking?
  surgical String?
  conditionName String?
  diagnosisDate DateTime?
  conditionStatus String?
  currentTreatement String?
  algerge Json?
  currentMedication Json?
  user User @relation(fields:[userId],references:[id])
  userId Int @unique()

}

model Payment{

  id Int @id() @default(autoincrement())
  mode String
  bankName String
  cardNumber String @unique()
  CardHolder String
  expriy DateTime
  cvc Int
  country String
}

model Invoice{

  id Int @id() @default(autoincrement())
  transactionId String @unique()
  Paymentmode String
  itemName String
  quantity Int
  price Int
  subTotal Int
  discount Int
  coupon Int
  tax Int
  Total Int
}


